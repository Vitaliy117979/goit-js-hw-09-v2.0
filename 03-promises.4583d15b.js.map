{"mappings":"AAiGAA,QAAQC,IAAI","sources":["src/js/03-promises.js"],"sourcesContent":["// // import Notiflix from 'notiflix';\n\n// // const refs = {\n// //   form: document.querySelector('.form'),\n// // };\n// // const formElements = {delay, step, amount, jsButton} = refs.form.elements\n\n// // refs.form.addEventListener('submit', preventDefaultForm);\n// // function preventDefaultForm(e) {\n// //   e.preventDefault()\n// //   setTimeout(() => {\n// //     createAmount(amount.value);\n// //   }, delay.value);\n// // }\n// // function createAmount(amount) {\n\n// //   for (let i = 1; i <= amount; i += 1) {\n// //     const delay = Number(step.value) * [i - 1] + Number(refs.form.elements.delay.value);\n// //     const position = [i];\n// //     console.log(delay);\n  \n// //   createPromise(position, delay) \n  \n\n// //     .then(({ position, delay }) => {\n// //       Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// //     })\n// //     .catch(({ position, delay }) => {\n// //       Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n// //     });\n// // }\n// // }\n// // function createPromise(position, delay) {\n// //   const shouldResolve = Math.random() > 0.3;\n\n// //   const promise = new Promise((resolve, reject) => {\n// //     setTimeout(() => {\n// //       if (shouldResolve) {\n// //         resolve({ position, delay});\n// //         // Fulfill\n// //       } else {\n// //         reject({ position, delay});\n// //         // Reject\n// //       }\n// //     }, delay);\n// //   });\n// //   return promise;\n// // }\n\n// import Notiflix from 'notiflix';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n// };\n// const formElements = {delay, step, amount, jsButton} = refs.form.elements\n\n// refs.form.addEventListener('submit', preventDefaultForm);\n// function preventDefaultForm(e) {\n//   e.preventDefault()\n//   setTimeout(() => {\n//     createAmount(amount.value);\n//   }, delay.value);\n// }\n// function createAmount(amount) {\n\n//   for (let i = 1; i <= amount; i += 1) {\n//     const delay = Number(step.value) * [i - 1] + Number(refs.form.elements.delay.value);\n//     const position = [i];\n//     console.log(delay);\n  \n//   createPromise(position, delay) \n  \n\n//     .then(({ position, delay }) => {\n//       Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//     .catch(({ position, delay }) => {\n//       Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n// }\n// }\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   const promise = new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve({ position, delay});\n//         // Fulfill\n//       } else {\n//         reject({ position, delay});\n//         // Reject\n//       }\n//     }, delay);\n//   });\n//   return promise;\n// }\nconsole.log('sdfjgkhlkj;l')"],"names":["console","log"],"version":3,"file":"03-promises.4583d15b.js.map"}